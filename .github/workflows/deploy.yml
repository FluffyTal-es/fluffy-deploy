name: 'deploy to server'

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Which repository to deploy'
        required: true
        default: 'all'
        type: string
      live:
        description: 'Deploy to live server?'
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      sha:
        description: 'Last commit SHA'
        required: false
        type: string
      actor:
        description: 'Who changed it?'
        default: 'devs'
        required: false
        type: string

env:
  REMOTE_PATH: ${{ false }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: 'Prepare message'
        run: |
          declare -A autor=( [derkleinlord]=331503616600965121 [devs]="&959103824495280139" [Zimpi]=120607493528354818 [Salzgardist]=212296010146250753 [kazimir]=202167314823512064 ["schroenser"]=237608984998182914 [dominicrico]=396744310768271381 )
          echo {\"actor\":\""${autor[${{github.event.inputs.actor}}]}"\", \"repo\":\"${{github.event.inputs.repo}}\", \"live\":\"${{github.event.inputs.live}}\"} > status.json

      - uses: actions/upload-artifact@v4
        with:
          name: status
          path: status.json
          include-hidden-files: true

      - name: Fetch local action
        uses: actions/checkout@master

      - name: Find repos to deploy
        uses: ./
        id: set-matrix
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
          repos: ${{ github.event.inputs.repo }}

  clone:
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    outputs:
      commit_sha: ${{ steps.get-sha.outputs.commit_sha }}

    steps:
      - name: Clone resource repository from develop branch
        uses: actions/checkout@master
        if: ${{ github.event.inputs.live != 'yes' }}
        with:
          repository: FluffyTal-es/${{ matrix.name }}
          token: ${{ secrets.DEPLOY_TOKEN }}
          path: ${{ matrix.path }}
          ref: 'develop'
          lfs: 'true'

      - name: Clone resource repository from main branch
        uses: actions/checkout@master
        if: ${{ github.event.inputs.live == 'yes' }}
        with:
          repository: FluffyTal-es/${{ matrix.name }}
          token: ${{ secrets.DEPLOY_TOKEN }}
          path: ${{ matrix.path }}
          ref: 'main'
          lfs: 'true'

      - name: Determine commit_sha to use
        id: get-sha
        run: |
          if [ "${{ github.event.inputs.sha }}" != "" ]; then
            echo "::set-output name=commit_sha::${{ github.event.inputs.sha }}"
          else
            echo "::set-output name=commit_sha::$(cd ${{ matrix.path }} && git log -1 '--format=format:%H')"
          fi

      - name: Remove git folders
        run: |
          rm -rf ${{ matrix.path }}/.git
          rm -rf ${{ matrix.path }}/.github
          rm -f ${{ matrix.path }}/.gitattributes
          rm -f ${{ matrix.path }}/Readme.md
          find ${{ matrix.path }} -type f -iname "readme.md" -exec rm {} +

      - uses: actions/upload-artifact@v4
        with:
          name: fluffyv
          path: '.'
          include-hidden-files: true

  release:
    needs: [prepare, clone]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: fluffyv

      - uses: FluffyTal-es/fluffy-auto-release@latest
        if: ${{ github.event.inputs.repo != 'all' }}
        with:
          repo_token: '${{ secrets.DEPLOY_TOKEN }}'
          automatic_release_tag: 'latest'
          repository: ${{ matrix.name }}
          sha: ${{ needs.clone.outputs.commit_sha }}

  push:
    needs: [prepare, clone, release]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: fluffyv

      - name: 'Deploy resources to live server'
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH != false }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: '.'
          remote_dir: '/opt/fivem_resources'
        run: |
          mkdir -p ~/.ssh
          echo $( dirname ${{ matrix.path }} )
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to development server'
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH != false }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: '.'
          remote_dir: '/opt/dev_resources'
        run: |
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to live server'
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH == false  }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: '.'
          remote_dir: '/opt/fivem_resources'
        run: |
          echo $REMOTE_PATH
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to development server'
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH == false }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: '.'
          remote_dir: '/opt/dev_resources'
        run: |
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to fluffyv.dev live server'
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH != false }}
        env:
          remote_host: ${{ secrets.FLUFFY_DEV_HOST }}
          remote_port: ${{ secrets.FLUFFY_DEV_PORT }}
          remote_user: ${{ secrets.FLUFFY_DEV_USER }}
          remote_key: ${{ secrets.FLUFFY_DEV_SSH_KEY }}
          local_dir: '.'
          remote_dir: '/opt/containers/fivem-live/data/fivem'
        run: |
          mkdir -p ~/.ssh
          echo $( dirname ${{ matrix.path }} )
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to fluffyv.dev development server'
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH != false }}
        env:
          remote_host: ${{ secrets.FLUFFY_DEV_HOST }}
          remote_port: ${{ secrets.FLUFFY_DEV_PORT }}
          remote_user: ${{ secrets.FLUFFY_DEV_USER }}
          remote_key: ${{ secrets.FLUFFY_DEV_SSH_KEY }}
          local_dir: '.'
          remote_dir: '/opt/containers/fivem-dev/data/fivem'
        run: |
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to fluffyv.dev live server'
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH == false  }}
        env:
          remote_host: ${{ secrets.FLUFFY_DEV_HOST }}
          remote_port: ${{ secrets.FLUFFY_DEV_PORT }}
          remote_user: ${{ secrets.FLUFFY_DEV_USER }}
          remote_key: ${{ secrets.FLUFFY_DEV_SSH_KEY }}
          local_dir: '.'
          remote_dir: '/opt/containers/fivem-dev/data/fivem'
        run: |
          echo $REMOTE_PATH
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Deploy resources to fluffyv.dev development server'
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH == false }}
        env:
          remote_host: ${{ secrets.FLUFFY_DEV_HOST }}
          remote_port: ${{ secrets.FLUFFY_DEV_PORT }}
          remote_user: ${{ secrets.FLUFFY_DEV_USER }}
          remote_key: ${{ secrets.FLUFFY_DEV_SSH_KEY }}
          local_dir: '.'
          remote_dir: '/opt/containers/fivem-dev/data/fivem'
        run: |
          mkdir -p ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          cd ${{ matrix.path }}
          rsync -avzrIO --delete --exclude 'node_modules/' --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" . ${remote_user}@${remote_host}:${remote_dir}/${{ matrix.remotePath }}
          rm ~/.ssh/id_github

      - name: 'Clean up'
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: fluffyv
