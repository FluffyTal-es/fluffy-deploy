name: "deploy to server"

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Which repository to deploy'
        required: true
        default: 'all' 
        type: string
      live:
        description: 'Deploy to live server?'
        required: true
        default: 'yes' 
        type: choice
        options:
        - 'yes'
        - 'no'
      sha:
        description: 'Last commit SHA'
        required: false
        type: string
      actor:
        description: 'Who changed it?'
        default: 'devs' 
        required: false
        type: string

env:
  REMOTE_PATH: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: "Prepare message"
      run: |
        declare -A autor=( [derkleinlord]=331503616600965121 [devs]=959103824495280139 [Zimpi]=120607493528354818 [Salzgardist]=212296010146250753 [SanjaDevUE]=468190459282456576 ["NÃ¶th, Leon"]=233226704724688897 [dominicrico]=396744310768271381 )
        echo {\"actor\":\""${autor[${{github.event.inputs.actor}}]}"\", \"repo\":\"${{github.event.inputs.repo}}\", \"live\":\"${{github.event.inputs.live}}\"} > status.json

    - uses: actions/upload-artifact@v2
      with:
        name: status
        path: status.json

    - name: Fetch local action
      uses: actions/checkout@v3

    - name: Find repos to deploy
      uses: ./
      id: set-matrix
      with:
        token: ${{ secrets.DEPLOY_TOKEN }}
        repos: ${{ github.event.inputs.repo }}

  clone:
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    
    steps:
      - name: Clone resource repository from develop branch
        uses: actions/checkout@master
        if: ${{ github.event.inputs.live != 'yes' }}
        with:
          repository: FluffyTal-es/${{ matrix.name }}
          token: ${{ secrets.DEPLOY_TOKEN }}
          path:  ${{ matrix.path }}
          ref: 'develop'

      - name: Clone resource repository from main branch
        uses: actions/checkout@master
        if: ${{ github.event.inputs.live == 'yes' }}
        with:
          repository: FluffyTal-es/${{ matrix.name }}
          token: ${{ secrets.DEPLOY_TOKEN }}
          path:  ${{ matrix.path }}
          ref: 'main'
      
      - name: Remove git folders
        run: | 
          rm -rf ${{ matrix.path }}/.git
          rm -rf ${{ matrix.path }}/.github

      - name: "Move configs to right path"
        if: matrix.name == 'fluffy-configs'
        env: 
          CONFIG: ${{ matrix.path }}
        run: |
          cp resources/\[configs\]/fluffy-configs/config/*.cfg resources/[\configs\]/
          mv resources/\[configs\]/fluffy-configs/server.cfg ./server.cfg
          rm -r resources/\[configs\]/fluffy-configs
          echo "REMOTE_PATH=resources/[\configs\]/" >> $GITHUB_ENV

      - name: "Move MLOs to right path"
        if: matrix.name == 'fluffy-mlos'
        env: 
          CONFIG: ${{ matrix.path }}
        run: |
          mkdir -p resources/[\fluffy-mlos\]/
          mv resources/\[fluffy\]/fluffy-mlos/* resources/[\fluffy-mlos\]/
          echo "REMOTE_PATH=resources/[\fluffy-mlos\]/" >> $GITHUB_ENV

      - name: "Move Peds to right path"
        if: matrix.name == 'fluffy-peds'
        env: 
          CONFIG: ${{ matrix.path }}
        run: |
          mkdir -p resources/[\fluffy-peds\]/
          mv resources/\[fluffy\]/fluffy-peds/* resources/[\fluffy-peds\]/
          echo "REMOTE_PATH=resources/[\fluffy-peds\]/" >> $GITHUB_ENV

      - name: "Move Cars to right path"
        if: matrix.name == 'fluffy-moddedcars'
        env: 
          CONFIG: ${{ matrix.path }}
        run: |
          mkdir -p resources/[\fluffy-moddedcars\]/
          mv resources/\[fluffy\]/fluffy-moddedcars/* resources/[\fluffy-moddedcars\]/
          echo "REMOTE_PATH=resources/[\fluffy-moddedcars\]/" >> $GITHUB_ENV

      - name: Delete related qb resource 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: find /opt/fivem_resources/resources -maxdepth 2 -type d -name "${{ matrix.qb }}*" | grep -v 'fluffy' | xargs rm -rf
      
      - uses: FluffyTal-es/fluffy-auto-release@latest
        if: ${{ github.event.inputs.repo != 'all' }} 
        with:
          repo_token: "${{ secrets.DEPLOY_TOKEN }}"
          automatic_release_tag: "latest"
          repository: ${{ matrix.name }}
          sha: ${{ github.event.inputs.sha }}

      - uses: actions/upload-artifact@v2
        with:
          name: fluffytales
          path: '.'

  push:
    needs: [prepare, clone]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: fluffytales

      - name: "Deploy resources to live server"
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH != 'false' }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: "."
          remote_dir: "/opt/fivem_resources"
        run: |
          mkdir ~/.ssh
          echo $( dirname ${{ matrix.path }} )
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          rsync -avzrIO --delete --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" ${{ matrix.path }} ${remote_user}@${remote_host}:${remote_dir}/${ env.REMOTE_PATH }
          rm ~/.ssh/id_github

      - name: "Deploy resources to development server"
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH != 'false' }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: "."
          remote_dir: "/opt/dev_resources"
        run: |
          mkdir ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          rsync -avzrIO --delete --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" ${{ matrix.path }} ${remote_user}@${remote_host}:${remote_dir}/${ env.REMOTE_PATH }
          rm ~/.ssh/id_github
      
      - name: "Deploy resources to live server"
        if: ${{ github.event.inputs.live == 'yes' && env.REMOTE_PATH == 'false' }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: "."
          remote_dir: "/opt/fivem_resources"
        run: |
          echo $REMOTE_PATH
          mkdir ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          rsync -avzrIO --delete --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" ${{ matrix.path }} ${remote_user}@${remote_host}:${remote_dir}/$( dirname ${{ matrix.path }} )
          rm ~/.ssh/id_github

      - name: "Deploy resources to development server"
        if: ${{ github.event.inputs.live != 'yes' && env.REMOTE_PATH == 'false' }}
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: "."
          remote_dir: "/opt/dev_resources"
        run: |
          mkdir ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          rsync -avzrIO --delete --no-perms -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" ${{ matrix.path }} ${remote_user}@${remote_host}:${remote_dir}/$( dirname ${{ matrix.path }} )
          rm ~/.ssh/id_github

      - name: "Clean up"
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: fluffytales
